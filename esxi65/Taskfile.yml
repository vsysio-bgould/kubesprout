version: '3'
vars:
  GITROOT:
    sh: git rev-parse --show-toplevel
  SQLROOT:
    sh: echo $(git rev-parse --show-toplevel)/hosts.sqlite

tasks:

  # Checks and Balances

  ck_configured:
    desc: "Verifies that esxi65/config.conf is populated properly."
    silent: true
    internal: true
    preconditions:
      - sh: test -f esxi65/config.conf
        msg: "This task requires the esxi65 config to be populated. Hint: rename `esxi65/config.conf.sample` to `esxi65/config.conf` and populate values."
      - sh: |
          export LINE=$(cat esxi65/config.conf | grep sshPubKey=)
          echo LINE
          if [[ "$LINE" == *"~"* ]]; then
            exit 1
          fi
        msg: "Implementation does not support home path interpolation with the tilde (~) character. Use a fully qualified path in esxi65/config.conf instead."

  ck_nc:
    desc: "Verifies that the nc utility is installed"
    silent: true
    internal: true
    preconditions:
      - sh: command -v nc
        msg: "nc (netcat) utility needs to be installed to run this task"

  ck_sshconnect:
    desc: "Verifies that specified esxi host can be connected to over SSH"
    silent: true
    internal: true
    deps: [
      ck_configured,
      ck_nc
    ]
    preconditions:
      - sh: timeout 3 bash -c "</dev/tcp/$esxiHost/22"; echo $?
        msg: "Could not connect to ESXi over SSH. Check config, and check that SSH is running on the host."

  ck_sshauthenticate:
    desc: "Verifies that we can successfully authenticate with ESXi over SSH using our Public Key"
    silent: true
    internal: true
    deps: [
      ck_configured
    ]
    preconditions:
      - sh: ssh -oBatchMode=yes $esxiUser@$esxiHost
        msg: "Error when testing connectivity and authentication against ESXi host. Hint - try `task esxi65:sshkey` for help"

  ck_datastore:
    desc: "Checks datastore on remote ESXi host."
    silent: true
    internal: true
    deps: [
      ck_configured,
      ck_sshconnect,
      ck_sshauthenticate
    ]
    preconditions:
      - sh: ssh -oBatchMode=yes $esxiUser@$esxiHost test -d /vmfs/volumes/$scratchDatastoreUUID
        msg: "Unable to validate datastore exists on remote EXSi host."
      - sh: ssh -oBatchMode=yes $esxiUser@$esxiHost "touch /vmfs/volumes/$scratchDatastoreUUID/kubesprout-test-file && rm /vmfs/volumes/$scratchDatastoreUUID/kubesprout-test-file"
        msg: "Datastore exists, but not writable."

  ck_haveiniparser:
    desc: "Checks if we have the ini-parser in our local tree and clones it if not"
    internal: true
    silent: true
    deps: [
      ck_git
    ]
    cmds:
      - |
        if [[ ! -d "esxi65/ini-file-parser/.git"  ]]; then
          task -t $(git rev-parse --show-toplevel)/Taskfile.yml important -- ini-file-parser utility not installed, installing
          task -t $(git rev-parse --show-toplevel)/Taskfile.yml header -- Installing ini-file-parser utility
          mkdir -p $(git rev-parse --show-toplevel)/esxi65/ini-file-parser
          cd $(git rev-parse --show-toplevel)/ini-file-parser
          git init
          git remote add origin git@github.com:DevelopersToolbox/ini-file-parser.git
          git fetch
          git checkout master
          cd ..
        fi

  ck_git:
    desc: "Checks if git is installed"
    internal: true
    silent: true
    preconditions:
      - sh: command -v git
        msg: "git must be installed to use this task"

  ck_network:
    desc: "Ensures selected port group/network exists on remote ESXi host"
    internal: true
    silent: true
    vars:
      URI: '$esxiUser@$esxiHost'
      VMNetwork: '$VMNetwork'
    preconditions:
      - sh: |
              OUTPUT=$(ssh {{.URI}} esxcli network vswitch standard portgroup list)
              MISSING=true
              echo $OUTPUT | while read -r line
              do
                if [[ "$line" == *"${VMNetwork}"* ]]; then
                  MISSING=false
                fi
              done
              if [[ "$MISSING" == true ]]; then
                exit 1
              fi
        msg: "Network/port group specified in `esxi65/config.conf` does not exist on ESXi host."

  # Meat and Potatoes (yum!)

  sshkey:
    desc: "Explains how to install your SSH key to an ESXi 6.x host."
    silent: true
    deps: [
      ck_configured
    ]
    cmds:
      - task h2 -- How to install an SSH key to an ESXi 6.x host
      - echo "{{.ITALIC}}Reference - https://kb.vmware.com/s/article/1002866{{.END}}"
      - echo
      - task h3 -- SSH Public Key
      - cat $sshPubKey
      - echo
      - task h3 -- Instructions
      - echo "1. Connect to your ESXi host over SSH."
      - echo "2. Ensure the {{.BOLD}}/etc/ssh/keys-$esxiUser{{.END}} directory exists, is owned by $esxiUser, and has {{.BOLD}}chmod 0700{{.END}}"
      - echo "3. Ensure the file {{.BOLD}}/etc/ssh/keys-$esxiUser/authorized_keys{{.END}} exists, is owned by $esxiUser, and has {{.BOLD}}chmod 0600{{.END}}"
      - echo "4. Add the contents of {{.BOLD}}{{.UNDERLINE}}SSH Public Key{{.END}} (above header) to {{.BOLD}}/etc/ssh/keys-$esxiUser/authorized_keys{{.END}}"
      - echo "5. In {{.BOLD}}/etc/ssh/sshd_config{{.END}}, ensure {{.BOLD}}{{.UNDERLINE}}AuthorizedKeysFile{{.END}} is set to {{.BOLD}}yes{{.END}}"
      - echo "6. {{.BOLD}}[IF ROOT]{{.END}} In {{.BOLD}}/etc/ssh/sshd_config{{.END}}, ensure {{.BOLD}}{{.UNDERLINE}}PermitRootLogin{{.END}} is set to {{.BOLD}}yes{{.END}}"
      - echo "7. If you needed to alter {{.BOLD}}/etc/ssh/sshd_config{{.END}}, restart the sshd service with {{.BOLD}}/etc/init.d/SSH restart{{.END}}"

  datastores:
    desc: "Lists datastores on ESXi host"
    silent: true
    vars:
      URI: '$esxiUser@$esxiHost'
    deps: [
      ck_configured,
      ck_sshconnect,
      ck_sshauthenticate
    ]
    cmds:
      - ssh {{.URI}} esxcli storage filesystem list -i

  networks:
    desc: "List vSwitch port groups that a VM can be assigned to."
    silent: true
    vars:
      URI: '$esxiUser@$esxiHost'
    deps: [
      ck_configured,
      ck_sshconnect,
      ck_sshauthenticate
    ]
    cmds:
      - ssh {{.URI}} esxcli network vswitch standard portgroup list

  upload:
    desc: "Upload Disk Image to scratch datastore"
    silent: true
    interactive: true
    deps: [
      ck_configured,
      ck_sshconnect,
      ck_sshauthenticate,
      ck_datastore
    ]
    vars:
      IMAGE: '{{.CLI_ARGS}}'
      URI: '$esxiUser@$esxiHost'
    preconditions:
      - sh: test ! -z "{{.IMAGE}}"
        msg: "This task takes the name of an image file in the images directory as an argument. Hint: `task esxi65:upload -- <ImageFile>`"
      - sh: test -f "./images/{{.IMAGE}}.vmdk"
        msg: "Looks like to specified an image file that doesn't exist, boss."
    cmds:
      - task h1 -- Uploading image file {{.IMAGE}}.vmdk to ESXi host
      - echo "Image file - images/{{.IMAGE}}.vmdk"
      - echo "ESXi host - $esxiHost"
      - echo "Datastore - $scratchDatastoreUUID"
      - echo
      - task h2 -- Uploading images/{{.IMAGE}}.vmdk to /vmfs/volumes/$scratchDatastoreUUID/.kubesprout/{{.IMAGE}}.vmdk.
      - ssh {{.URI}} mkdir -p /vmfs/volumes/$scratchDatastoreUUID/.kubesprout
      - scp images/{{.IMAGE}}.vmdk {{.URI}}:/vmfs/volumes/$scratchDatastoreUUID/.kubesprout/{{.IMAGE}}.vmdk

  deploy:
    desc: "Deploys uploaded VM image to ESXi. Takes parameters, prototype - `task esxi65:deploy -- <ImageName> `"
    silent: true
    interactive: true
    deps: [
      ck_configured,
      ck_sshconnect,
      ck_sshauthenticate,
      ck_datastore,
      ck_network
    ]
    vars:
      IMAGE: '{{(split " " .CLI_ARGS)._0}}'
      NUMCPU: '{{(split " " .CLI_ARGS)._1}}'
      MEMSIZE: '{{(split " " .CLI_ARGS)._2}}'
      NETWORK: '{{(split " " .CLI_ARGS)._3}}'
      GUESTOS: '{{(split " " .CLI_ARGS)._4}}'
      URI: '$esxiUser@$esxiHost'
    preconditions:
      - sh: test -f "./images/{{.IMAGE}}.vmdk"
        msg: "Looks like you specified an image file that doesn't exist, boss."
      - sh: ssh {{.URI}} test -f /vmfs/volumes/$scratchDatastoreUUID/.kubesprout/{{.IMAGE}}.vmdk
        msg: "Specified image file does not exist on ESXi host. Check folder in selected datastore."
      - sh: ssh {{.URI}} test ! -d /vmfs/volumes/$scratchDatastoreUUID/{{.IMAGE}}
        msg: "Seems the directory containing assets related to this image already exists on the ESXi host."
    cmds:
      - task h1 -- Deploying uploaded image on ESXi host
      - task h3 -- Requested Parameters
      - echo "{{.BOLD}}VM Name{{.END}} - {{.IMAGE}}"
      - echo "{{.BOLD}}CPU Cores{{.END}} - {{.NUMCPU}}"
      - echo "{{.BOLD}}Memory Size (in MB){{.END}} - {{.MEMSIZE}}"
      - echo "{{.BOLD}}Network/Prtgroup{{.END}} - {{.NETWORK}}"
      - echo "{{.BOLD}}Guest OS{{.END}} - {{.GUESTOS}}"
      - echo "{{.BOLD}}Datastore{{.END}} - $scratchDatastoreUUID"
      - echo
      - task h2 -- Creating directory hosting VM assets on ESXi host
      - ssh {{.URI}} mkdir -p /vmfs/volumes/$scratchDatastoreUUID/{{.IMAGE}}
      - task h2 -- Moving image file from staged location to VM assets directory
      - ssh {{.URI}} mv /vmfs/volumes/$scratchDatastoreUUID/.kubesprout/{{.IMAGE}}.vmdk /vmfs/volumes/$scratchDatastoreUUID/{{.IMAGE}}/{{.IMAGE}}.vmdk
      - task h2 -- Running vmkfstools to convert VMDK file.
      - ssh {{.URI}} vmkfstools -i /vmfs/volumes/$scratchDatastoreUUID/{{.IMAGE}}/{{.IMAGE}}.vmdk /vmfs/volumes/$scratchDatastoreUUID/{{.IMAGE}}/{{.IMAGE}}-converted.vmdk
      - task h2 -- Creating and deploying VMX configuration file
      - $(git rev-parse --show-toplevel)/esxi65/vmxtemplate.sh --name {{.IMAGE}} --numvcpu {{.NUMCPU}} --memsize {{.MEMSIZE}} --network {{.NETWORK}} --datastore $scratchDatastoreUUID --stdout > /tmp/{{.IMAGE}}.vmx
      - scp /tmp/{{.IMAGE}}.vmx {{.URI}}:/vmfs/volumes/$scratchDatastoreUUID/{{.IMAGE}}/{{.IMAGE}}.vmx
      - ssh {{.URI}} vim-cmd solo/registervm /vmfs/volumes/$scratchDatastoreUUID/{{.IMAGE}}/{{.IMAGE}}.vmx {{.IMAGE}}
      - task h2 -- Cleaning up
      - ssh {{.URI}} rm -f /vmfs/volumes/$scratchDatastoreUUID/{{.IMAGE}}/{{.IMAGE}}.vmdk
      - task h2 -- Adding host to hosts database
      - |
        # Extract MAC address
        MAC=$(cat /tmp/{{.IMAGE}}.vmx | grep 'ethernet0.address\s=' | sed 's/ethernet0.address\s=\s\"\(.*\)"/\1/g')

        # Post values to cheapo db
        sqlite {{.SQLROOT}} "INSERT INTO hosts (module, fqdn, mac) VALUES (\"esxi65\", \"{{.IMAGE}}.vmnet.arpa\", \"{{.MAC}}\")"

        echo "Virtual Machine Registered:"
        echo "{{.BOLD}} - {{.IMAGE}} - {{.END}}\nMAC: $MAC" | boxes -d stone





