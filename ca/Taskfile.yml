version: '3'

tasks:

  # Checks and Balances
  ck_config:
    internal: true
    silent: true
    desc: "Verifies `config.conf` file exists before proceeding"
    dir: ca/
    preconditions:
      - sh:  test -f config.conf
        msg: "Before running this feature, you must rename and populate values in the `ca/config.conf.sample` file to `ca/config.conf`"
  ck_commands:
    internal: true
    silent: true
    desc: "Verifies dependent utilities, such as `openssl`, are available"
    dir: ca/
    preconditions:
      - sh: command -v openssl
        msg: Openssl utility needs to be installed
  ck_clean:
    internal: true
    silent: true
    desc: "Verifies if a certificate hierarchy is already generated"
    dir: ca/
    preconditions:
      - sh:  |
          if [ -f "ca/ca.crt" ]; then
            exit 1
          else
            exit 0
          fi
        msg: "A certificate hierarchy has already been generated! Run ca:obliterate first to clean this workspace, then try again."
  ck_cagenerated:
    internal: true
    silent: true
    desc: "Checks whether a root certificate hierarchy exists in this workspace."
    dir: ca/
    preconditions:
      - sh: test -f ca/ca.crt
        msg: "A root certificate hierarchy must already be generated. Run ca:generate first."

  # Help

  help:
    desc: Information
    silent: true
    cmds:
      - echo {{ .BLUE }} {{ .BOLD}} --------------- {{.STANDOUT}}Kubesprout Certificate Authority Module{{.NO_STANDOUT}} --------------- {{ .END }}
      - echo
      - echo This module generates a certificate hierarchy that is used by Kubernetes components
      - echo to authenticate and authorize communications with other components and entitites. The
      - echo output of this modules commands are a set of private keys and certificates that are
      - echo available in the {{ .BOLD }}{{ .ITALIC}}ca/ca/{{ .END }} directory.
      - echo
      - echo {{.BLUE}} ----- {{.STANDOUT}}Certificate Hierarchy{{.NO_STANDOUT}} ----- {{.END}}
      - echo The below flow chart shows the certificate hierarchy. All Kubernetes components are
      - echo signed with the {{.ITALIC}}"Cluster-local Certificate Authority"{{.END}} located at "layer" 3. A system
      - echo that needs to authenticate using this hierarchy needs to have one of the Certificate
      - echo Authorities listed below installed.
      - echo
      - echo Note that this repository passes this CA as parameters to called utilities. As a result, you do not need
      - echo to install authorities generated by this repository. Additionally, a {{.ITALIC}}.kubeconfig{{.END}}
      - echo is generated and installed so that kubectl (and other facilities using this file) can authenticate
      - echo
      - task ca:show_hierarchy
      - echo
      - echo {{ .BOLD }}{{.UNDERLINE}}Tasks:{{.END}}
      - task | grep ca

  show_hierarchy:
    desc: Print ASCII representation of resulting certificate hierarchy
    silent: true
    dotenv: ['config.conf']
    dir: ca/
    cmds:
      - printf "{{.BOLD}}1. Root Certificate Authority{{.END}}\n   Cert - ./ca/ca/ca.crt\n   Key  - ./ca/ca/ca.key" | boxes -d stone
      - printf "\n    |\n"
      - printf "{{.BOLD}}2. Intermediate Certificate Authority{{.END}}{{.ITALIC}} (signed by Root Certificate Authority){{.END}}\n   Cert - ./ca/ca/clusters_intca/private.crt\n   Key  - ./ca/ca/clusters_intca/private.key" | boxes -d stone
      - printf "\n    |\n"
      - printf "{{.BOLD}}3. Cluster-local Certificate Authority{{.END}}{{.ITALIC}} (signed by Intermediate Certificate Authority){{.END}}\n   Cert - .ca/ca/$clusterName$clusterVersion/public.crt\n   Key  - ./ca/ca/$clusterName$clusterVersion/private.key" | boxes -d stone
      - printf "\n    |\n"
      - printf "{{.BOLD}}kube-apiserver{{.END}}{{.ITALIC}} (signed by Cluster-local Certificate Authority){{.END}}\n   Path - .ca/ca/$clusterName$clusterVersion/kube-apiserver/" | boxes -d stone
      - printf "\n"
      - printf "{{.BOLD}}kube-controller-manager{{.END}}{{.ITALIC}} (signed by Cluster-local Certificate Authority){{.END}}\n   Path - .ca/ca/$clusterName$clusterVersion/kube-controller-manager/" | boxes -d stone
      - printf "\n"
      - printf "{{.BOLD}}kube-proxy{{.END}}{{.ITALIC}} (signed by Cluster-local Certificate Authority){{.END}}\n   Path - .ca/ca/$clusterName$clusterVersion/kube-proxy/" | boxes -d stone
      - printf "\n"
      - printf "{{.BOLD}}kube-scheduler{{.END}}{{.ITALIC}} (signed by Cluster-local Certificate Authority){{.END}}\n   Path - .ca/ca/$clusterName$clusterVersion/kube-scheduler/" | boxes -d stone
      - printf "\n"
      - printf "{{.BOLD}}service-accounts{{.END}}{{.ITALIC}} (signed by Cluster-local Certificate Authority){{.END}}\n   Path - .ca/ca/$clusterName$clusterVersion/service-accounts/" | boxes -d stone
      - printf "\n"
      - printf "{{.BOLD}}admin{{.END}}{{.ITALIC}} (signed by Cluster-local Certificate Authority){{.END}}\n   Path - .ca/ca/$clusterName$clusterVersion/admin/" | boxes -d stone




  # Meat and Potatoes (yum!)
  generate:
    desc: Generate CA materiel (follow-up with ca:kubernetes if bootstrapping a new cluster)
    deps: [
      ck_config,
      ck_commands,
      ck_clean
    ]
    silent: true
    dir: ca/
    dotenv: ['config.conf']
    cmds:
      - echo "---------- Sourcing values from config.conf ----------"
      - echo ">>>>> Cluster name - $clusterName"
      - echo ">>>>> Cluster version - $clusterVersion"
      - echo ">>>>> External control domain - $externalControlDomain"

      - echo ---------- Preparing ----------
      - mkdir -p ca/$clusterName$clusterVersion
      - mkdir -p ca/clusters_intca

      - echo ---------- Generating Root CA private key ----------
      - openssl genrsa -out ca/ca.key 4096

      - echo ---------- Signing Root CA public key ----------
      - openssl req -x509 -new -sha512 -key ca/ca.key -days 3650 -config ca.conf -out ca/ca.crt

      - echo ---------- Generating Clusters Intermediate CA private key ----------
      - openssl genrsa -out ca/clusters_intca/private.key 4096

      - echo ---------- Generating CSR signing request for Intermediate CA ----------
      - openssl req -new -sha256 -key ca/clusters_intca/private.key -config clusters_intca.conf -out ca/clusters_intca/private.csr

      - echo ---------- Signing Intermediate CA CSR with Root CA ----------
      - openssl x509 -req -in ca/clusters_intca/private.csr -CA ca/ca.crt -CAkey ca/ca.key -CAcreateserial -days 1825 -sha256 -out ca/clusters_intca/public.crt

      - echo ---------- Generating CA private key for $clusterName$clusterVersion ----------
      - openssl genrsa -out ca/$clusterName$clusterVersion/private.key -out ca/$clusterName$clusterVersion/private.key 4096

      - echo ---------- Generating CSR signing request for $clusterName$clusterVersion ----------
      - openssl req -new -sha256 -key ca/$clusterName$clusterVersion/private.key -config clusters_intca.conf -out ca/$clusterName$clusterVersion/private.csr

      - echo ---------- Signing $clusterName$clusterVersion CA CSR with Intermediate CA ----------
      - openssl x509 -req -in ca/$clusterName$clusterVersion/private.csr -CA ca/clusters_intca/public.crt -CAkey ca/clusters_intca/private.key -CAcreateserial -days 730 -sha256 -out ca/$clusterName$clusterVersion/public.crt

      - echo
      - echo ---------- SUMMARY ----------
      - echo
      - echo ">>>>> Root CA Private key - ca/ca/ca.key"
      - echo ">>>>> Root CA Public key - ca/ca/ca.crt"
      - echo ">>>>> Intermediate CA Private key - ca/clusters_intca/private.key"
      - echo ">>>>> Intermediate CA Certificate signing request  - ca/clusters_intca/private.csr"
      - echo ">>>>> Intermediate CA Public key - ca/clusters_intca/public.crt"
      - echo ">>>>> $clusterName$clusterVersion CA Private key - ca/clusters_intca/private.key"
      - echo ">>>>> $clusterName$clusterVersion CA Certificate signing request  - ca/clusters_intca/private.csr"
      - echo ">>>>> $clusterName$clusterVersion CA Public key - ca/clusters_intca/public.crt"
      - echo
      - echo "Generation complete! If you're bootstrapping a new cluster, you may now follow up with the ca:kubernetees task to generate those materials."

  obliterate:
    silent: true
    desc: Cleans up the CA workspace for generating a new hierarchy.
    prompt: |
      !! WARNING !!
      THIS IS A DESTRUCTIVE OPERATION that will destroy the certificate hierarchy set into this workspace.
      If you haven't backed up the contents of the ca/ folder, this will obliterate any chance of
      generating new certificates.
      In other words...
      Bad stuff will happen. ESPECIALLY IF YOU IGNORE THIS MSG.
      !! WARNING !!
    dir: ca/
    cmds:
      - rm -rf ca/

  kubernetes:
    silent: true
    desc: Generates cryptographic materiel necessary to bootstrap the base elements of a Kubernetees cluster.
    interactive: true
    deps: [
      ck_config,
      ck_commands,
      ck_cagenerated
    ]
    dir: ca/
    dotenv: ['config.conf']
    cmds:
      - echo "---------- Sourcing values ----------"
      - echo ">>>>> Cluster name - $clusterName"
      - echo ">>>>> Cluster version - $clusterVersion"
      - echo ">>>>> External control domain - $externalControlDomain"
      - echo ">>>>> Root CA Private key - ca/ca/ca.key"
      - echo ">>>>> Root CA Public key - ca/ca/ca.crt"
      - echo ">>>>> Intermediate CA Private key - ca/clusters_intca/private.key"
      - echo ">>>>> Intermediate CA Certificate signing request  - ca/clusters_intca/private.csr"
      - echo ">>>>> Intermediate CA Public key - ca/clusters_intca/public.crt"
      - echo ">>>>> $clusterName$clusterVersion CA Private key - ca/clusters_intca/private.key"
      - echo ">>>>> $clusterName$clusterVersion CA Certificate signing request  - ca/clusters_intca/private.csr"
      - echo ">>>>> $clusterName$clusterVersion CA Public key - ca/clusters_intca/public.crt"
      - echo
      - mkdir -p ca/$clusterName$clusterVersion/kube-apiserver/
      - mkdir -p ca/$clusterName$clusterVersion/kube-controller-manager/
      - mkdir -p ca/$clusterName$clusterVersion/kube-scheduler/
      - mkdir -p ca/$clusterName$clusterVersion/kube-proxy/
      - mkdir -p ca/$clusterName$clusterVersion/service-accounts/
      - mkdir -p ca/$clusterName$clusterVersion/admin/

      # GENERATE PRIVATE KEY MATERIAL
      - echo ---------- Generating private key material for kube-apiserver ----------
      - openssl genrsa -out ca/$clusterName$clusterVersion/kube-apiserver/private.key 4096
      - echo
      - echo ---------- Generating private key material for kube-controller-manager ----------
      - openssl genrsa -out ca/$clusterName$clusterVersion/kube-controller-manager/private.key 4096
      - echo
      - echo ---------- Generating private key material for kube-scheduler ----------
      - openssl genrsa -out ca/$clusterName$clusterVersion/kube-scheduler/private.key 4096
      - echo
      - echo ---------- Generating private key material for kube-proxy ----------
      - openssl genrsa -out ca/$clusterName$clusterVersion/kube-proxy/private.key 4096
      - echo
      - echo ---------- Generating private key material for service-accounts ----------
      - openssl genrsa -out ca/$clusterName$clusterVersion/service-accounts/private.key 4096
      - echo
      - echo ---------- Generating private key material for admin ----------
      - openssl genrsa -out ca/$clusterName$clusterVersion/admin/private.key 4096

      # GENERATE CSRs
      - echo ---------- Generating Certificate Signing Request for kube-apiserver ----------
      - openssl req -new -key ca/$clusterName$clusterVersion/kube-apiserver/private.key -sha256 -config "k8s.conf" -section "kube-api-server" -out ca/$clusterName$clusterVersion/kube-apiserver/private.csr
      - echo ---------- Generating Certificate Signing Request for kube-controller-manager ----------
      - openssl req -new -key ca/$clusterName$clusterVersion/kube-controller-manager/private.key -sha256 -config "k8s.conf" -section "kube-controller-manager" -out ca/$clusterName$clusterVersion/kube-controller-manager/private.csr
      - echo ---------- Generating Certificate Signing Request for kube-scheduler ----------
      - openssl req -new -key ca/$clusterName$clusterVersion/kube-scheduler/private.key -sha256 -config "k8s.conf" -section "kube-scheduler" -out ca/$clusterName$clusterVersion/kube-scheduler/private.csr
      - echo ---------- Generating Certificate Signing Request for kube-proxy ----------
      - openssl req -new -key ca/$clusterName$clusterVersion/kube-proxy/private.key -sha256 -config "k8s.conf" -section "kube-proxy" -out ca/$clusterName$clusterVersion/kube-proxy/private.csr
      - echo ---------- Generating Certificate Signing Request for service-accounts ----------
      - openssl req -new -key ca/$clusterName$clusterVersion/service-accounts/private.key -sha256 -config "k8s.conf" -section "service-accounts" -out ca/$clusterName$clusterVersion/service-accounts/private.csr
      - echo ---------- Generating Certificate Signing Request for admin ----------
      - openssl req -new -key ca/$clusterName$clusterVersion/admin/private.key -sha256 -config "k8s.conf" -section "admin" -out ca/$clusterName$clusterVersion/admin/private.csr

      # GENERATE NEW PUBLIC KEYS

      - echo ---------- Signing kube-apiserver using $clusterName$clusterVersion CA ----------
      - openssl x509 -req -in ca/$clusterName$clusterVersion/kube-apiserver/private.csr -CA ca/$clusterName$clusterVersion/public.crt -CAkey ca/$clusterName$clusterVersion/private.key -CAcreateserial -days 730 -sha256 -out ca/$clusterName$clusterVersion/kube-apiserver/public.crt
      - echo ---------- Signing kube-controller-manager using $clusterName$clusterVersion CA ----------
      - openssl x509 -req -in ca/$clusterName$clusterVersion/kube-controller-manager/private.csr -CA ca/$clusterName$clusterVersion/public.crt -CAkey ca/$clusterName$clusterVersion/private.key -CAcreateserial -days 730 -sha256 -out ca/$clusterName$clusterVersion/kube-controller-manager/public.crt
      - echo ---------- Signing kube-scheduler using $clusterName$clusterVersion CA ----------
      - openssl x509 -req -in ca/$clusterName$clusterVersion/kube-scheduler/private.csr -CA ca/$clusterName$clusterVersion/public.crt -CAkey ca/$clusterName$clusterVersion/private.key -CAcreateserial -days 730 -sha256 -out ca/$clusterName$clusterVersion/kube-scheduler/public.crt
      - echo ---------- Signing kube-proxy using $clusterName$clusterVersion CA ----------
      - openssl x509 -req -in ca/$clusterName$clusterVersion/kube-proxy/private.csr -CA ca/$clusterName$clusterVersion/public.crt -CAkey ca/$clusterName$clusterVersion/private.key -CAcreateserial -days 730 -sha256 -out ca/$clusterName$clusterVersion/kube-proxy/public.crt
      - echo ---------- Signing service-accounts using $clusterName$clusterVersion CA ----------
      - openssl x509 -req -in ca/$clusterName$clusterVersion/service-accounts/private.csr -CA ca/$clusterName$clusterVersion/public.crt -CAkey ca/$clusterName$clusterVersion/private.key -CAcreateserial -days 730 -sha256 -out ca/$clusterName$clusterVersion/service-accounts/public.crt
      - echo ---------- Signing admin using $clusterName$clusterVersion CA ----------
      - openssl x509 -req -in ca/$clusterName$clusterVersion/admin/private.csr -CA ca/$clusterName$clusterVersion/public.crt -CAkey ca/$clusterName$clusterVersion/private.key -CAcreateserial -days 730 -sha256 -out ca/$clusterName$clusterVersion/admin/public.crt
      - echo

      # Summarize
      - echo {{.BLUE}}{{.BOLD}}---------- {{.STANDOUT}}SUMMARY{{.NO_STANDOUT}} ----------{{.END}}
      - echo
      - task show_hierarchy
      - echo

  single:
    silent: true
    desc: "Generates and signs a single certificate against the cluster CA. Usage is available by running `task --summary ca:single`"
    summary: |
      Generates and signs a single certificate against the cluster CA.

      Usage:
      task ca:single -- <CommonName> [organization]

      <CommonName> is mandatory and (generally) identifies the entity for which we're authenticating as. Depending on where the resulting materials are to be installed, it can be a hostname, a username, an email address or a built-in entity.
      [organization] is optional and generally represents a group to which the entity belongs (such as system:masters)
    dir: ca/
    dotenv: ['config.conf']
    deps: [
      ck_cagenerated
    ]
    vars:
      CN: '{{(split " " .CLI_ARGS)._0}}'
      ORGV: '{{(split " " .CLI_ARGS)._1}}'
      ORGS: '{{ with .ORGV }}/O={{ . }}{{end}}'
      SUBJECT: '/CN={{.CN}}{{.ORGS}}'
    preconditions:
      - sh: test ! -z "{{.CN}}"
        msg: "This task requires parameters. Check the output of task --summary ca:single for more."
    cmds:
      - echo {{.SUBJECT}}
      - echo ---------- Generating private key material for {{.CN}} ----------
      - mkdir -p ca/$clusterName$clusterVersion/{{.CN}}
      - openssl genrsa -out ca/$clusterName$clusterVersion/{{.CN}}/private.key 4096
      - echo ---------- Generating Certificate Signing Request for {{.CN}} ----------
      - openssl req -new -key ca/$clusterName$clusterVersion/{{.CN}}/private.key -sha256 -out ca/$clusterName$clusterVersion/{{.CN}}/private.csr -subj {{.SUBJECT}}
      - echo ---------- Signing {{.CN}} using $clusterName$clusterVersion CA ----------
      - openssl x509 -req -in ca/$clusterName$clusterVersion/{{.CN}}/private.csr -CA ca/$clusterName$clusterVersion/public.crt -CAkey ca/$clusterName$clusterVersion/private.key -CAcreateserial -days 730 -sha256 -out ca/$clusterName$clusterVersion/{{.CN}}/public.crt






